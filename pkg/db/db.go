// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createJobStmt, err = db.PrepareContext(ctx, createJob); err != nil {
		return nil, fmt.Errorf("error preparing query CreateJob: %w", err)
	}
	if q.createTestcaseStmt, err = db.PrepareContext(ctx, createTestcase); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTestcase: %w", err)
	}
	if q.getJobStmt, err = db.PrepareContext(ctx, getJob); err != nil {
		return nil, fmt.Errorf("error preparing query GetJob: %w", err)
	}
	if q.getTestcaseStmt, err = db.PrepareContext(ctx, getTestcase); err != nil {
		return nil, fmt.Errorf("error preparing query GetTestcase: %w", err)
	}
	if q.getTestcaseForJobStmt, err = db.PrepareContext(ctx, getTestcaseForJob); err != nil {
		return nil, fmt.Errorf("error preparing query GetTestcaseForJob: %w", err)
	}
	if q.listJobsStmt, err = db.PrepareContext(ctx, listJobs); err != nil {
		return nil, fmt.Errorf("error preparing query ListJobs: %w", err)
	}
	if q.listTestcasesStmt, err = db.PrepareContext(ctx, listTestcases); err != nil {
		return nil, fmt.Errorf("error preparing query ListTestcases: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createJobStmt != nil {
		if cerr := q.createJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createJobStmt: %w", cerr)
		}
	}
	if q.createTestcaseStmt != nil {
		if cerr := q.createTestcaseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTestcaseStmt: %w", cerr)
		}
	}
	if q.getJobStmt != nil {
		if cerr := q.getJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getJobStmt: %w", cerr)
		}
	}
	if q.getTestcaseStmt != nil {
		if cerr := q.getTestcaseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTestcaseStmt: %w", cerr)
		}
	}
	if q.getTestcaseForJobStmt != nil {
		if cerr := q.getTestcaseForJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTestcaseForJobStmt: %w", cerr)
		}
	}
	if q.listJobsStmt != nil {
		if cerr := q.listJobsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listJobsStmt: %w", cerr)
		}
	}
	if q.listTestcasesStmt != nil {
		if cerr := q.listTestcasesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTestcasesStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                    DBTX
	tx                    *sql.Tx
	createJobStmt         *sql.Stmt
	createTestcaseStmt    *sql.Stmt
	getJobStmt            *sql.Stmt
	getTestcaseStmt       *sql.Stmt
	getTestcaseForJobStmt *sql.Stmt
	listJobsStmt          *sql.Stmt
	listTestcasesStmt     *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                    tx,
		tx:                    tx,
		createJobStmt:         q.createJobStmt,
		createTestcaseStmt:    q.createTestcaseStmt,
		getJobStmt:            q.getJobStmt,
		getTestcaseStmt:       q.getTestcaseStmt,
		getTestcaseForJobStmt: q.getTestcaseForJobStmt,
		listJobsStmt:          q.listJobsStmt,
		listTestcasesStmt:     q.listTestcasesStmt,
	}
}
